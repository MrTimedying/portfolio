{"version":3,"file":"simulation.worker-D7EjXoom.js","sources":["../src/workers/simulation.worker.ts"],"sourcesContent":["// Statistical Simulation Web Worker\n// Implements the core simulation_p function from legacy notebook\n\ninterface SimulationConfig {\n  id: string;\n  samplePairs: SamplePair[];\n  simulationCount: number;\n  significanceThresholds: number[];\n  confidenceLevel: number;\n}\n\ninterface SamplePair {\n  id: string;\n  name: string;\n  population1: PopulationConfig;\n  population2: PopulationConfig;\n  sampleSize: number;\n}\n\ninterface PopulationConfig {\n  mean: number;\n  std: number;\n  size: number;\n}\n\ninterface SamplePairResult {\n  samplePairName: string;\n  sampleSize: number;\n  trueEffectSize: number;\n  effectSize: number[];\n  pValues: number[];\n  ciGaps: number[];\n  upperBounds: number[];\n  lowerBounds: number[];\n  log10P: number[];\n  sValues: number[];\n  meanEffectSize: number;\n  meanCIGap: number;\n  powerAtThresholds: Record<string, number>;\n}\n\ninterface SimulationResults {\n  effectSize: number[];\n  pValues: number[];\n  ciGaps: number[];\n  upperBounds: number[];\n  lowerBounds: number[];\n  log10P: number[];\n  sValues: number[]; // -log2(p-value) Shannon information\n  meanEffectSize: number;\n  meanCIGap: number;\n  powerAtThresholds: Record<string, number>;\n  completedSimulations: number;\n  \n  // Configuration metadata for visualization\n  sampleSize?: number;\n  trueEffectSize?: number;\n  samplePairName?: string;\n  \n  // Multi-pair results (like the original notebook)\n  samplePairResults: SamplePairResult[];\n}\n\ninterface WorkerMessage {\n  type: 'SIMULATION_START' | 'SIMULATION_PROGRESS' | 'SIMULATION_COMPLETE' | 'SIMULATION_ERROR' | 'TEST' | 'TEST_RESPONSE';\n  id: string;\n  data?: any;\n  progress?: number;\n  error?: string;\n}\n\n// Statistical utility functions\nclass StatisticalCalculator {\n  \n  // Generate normal random samples using Box-Muller transform\n  static generateNormalSamples(n: number, mean: number, std: number): number[] {\n    const samples: number[] = [];\n    \n    for (let i = 0; i < n; i += 2) {\n      const u1 = Math.random();\n      const u2 = Math.random();\n      \n      const z0 = Math.sqrt(-2 * Math.log(u1)) * Math.cos(2 * Math.PI * u2);\n      const z1 = Math.sqrt(-2 * Math.log(u1)) * Math.sin(2 * Math.PI * u2);\n      \n      samples.push(z0 * std + mean);\n      if (i + 1 < n) {\n        samples.push(z1 * std + mean);\n      }\n    }\n    \n    return samples.slice(0, n);\n  }\n  \n  // Sample without replacement from population\n  static sampleWithoutReplacement(population: number[], sampleSize: number): number[] {\n    const indices = Array.from({ length: population.length }, (_, i) => i);\n    const selectedIndices: number[] = [];\n    \n    for (let i = 0; i < sampleSize; i++) {\n      const randomIndex = Math.floor(Math.random() * indices.length);\n      selectedIndices.push(indices[randomIndex]);\n      indices.splice(randomIndex, 1);\n    }\n    \n    return selectedIndices.map(i => population[i]);\n  }\n  \n  // Calculate sample mean\n  static mean(samples: number[]): number {\n    return samples.reduce((sum, x) => sum + x, 0) / samples.length;\n  }\n  \n  // Calculate sample standard deviation\n  static std(samples: number[]): number {\n    const m = this.mean(samples);\n    const variance = samples.reduce((sum, x) => sum + Math.pow(x - m, 2), 0) / (samples.length - 1);\n    return Math.sqrt(variance);\n  }\n  \n  // Welch's t-test for unequal variances\n  static welchTTest(sample1: number[], sample2: number[]): { tStat: number; pValue: number; df: number } {\n    const n1 = sample1.length;\n    const n2 = sample2.length;\n    const mean1 = this.mean(sample1);\n    const mean2 = this.mean(sample2);\n    const std1 = this.std(sample1);\n    const std2 = this.std(sample2);\n    \n    // Welch's t-statistic\n    const pooledSE = Math.sqrt((std1 * std1) / n1 + (std2 * std2) / n2);\n    const tStat = (mean1 - mean2) / pooledSE;\n    \n    // Welch-Satterthwaite degrees of freedom\n    const df = Math.pow((std1 * std1) / n1 + (std2 * std2) / n2, 2) / \n               (Math.pow((std1 * std1) / n1, 2) / (n1 - 1) + Math.pow((std2 * std2) / n2, 2) / (n2 - 1));\n    \n    // Two-tailed p-value using t-distribution approximation\n    const pValue = 2 * (1 - this.tCDF(Math.abs(tStat), df));\n    \n    return { tStat, pValue, df };\n  }\n  \n  // Student's t-distribution CDF approximation\n  static tCDF(t: number, df: number): number {\n    // Using incomplete beta function approximation for t-distribution\n    if (df === 1) {\n      return 0.5 + Math.atan(t) / Math.PI;\n    }\n    \n    const x = df / (df + t * t);\n    return 1 - 0.5 * this.incompleteBeta(df / 2, 0.5, x);\n  }\n  \n  // Incomplete beta function approximation\n  static incompleteBeta(a: number, b: number, x: number): number {\n    if (x <= 0) return 0;\n    if (x >= 1) return 1;\n    \n    // Continued fraction approximation\n    const bt = Math.exp(this.logGamma(a + b) - this.logGamma(a) - this.logGamma(b) + \n                       a * Math.log(x) + b * Math.log(1 - x));\n    \n    if (x < (a + 1) / (a + b + 2)) {\n      return bt * this.continuedFractionBeta(a, b, x) / a;\n    } else {\n      return 1 - bt * this.continuedFractionBeta(b, a, 1 - x) / b;\n    }\n  }\n  \n  // Log gamma function approximation\n  static logGamma(x: number): number {\n    const coefficients = [\n      0.99999999999980993, 676.5203681218851, -1259.1392167224028,\n      771.32342877765313, -176.61502916214059, 12.507343278686905,\n      -0.13857109526572012, 9.9843695780195716e-6, 1.5056327351493116e-7\n    ];\n    \n    if (x < 0.5) {\n      return Math.log(Math.PI) - Math.log(Math.sin(Math.PI * x)) - this.logGamma(1 - x);\n    }\n    \n    x -= 1;\n    let a = coefficients[0];\n    for (let i = 1; i < coefficients.length; i++) {\n      a += coefficients[i] / (x + i);\n    }\n    \n    const t = x + coefficients.length - 1.5;\n    return 0.5 * Math.log(2 * Math.PI) + (x + 0.5) * Math.log(t) - t + Math.log(a);\n  }\n  \n  // Continued fraction for incomplete beta\n  static continuedFractionBeta(a: number, b: number, x: number): number {\n    const maxIterations = 200;\n    const epsilon = 1e-15;\n    \n    let c = 1;\n    let d = 1 - (a + b) * x / (a + 1);\n    if (Math.abs(d) < epsilon) d = epsilon;\n    d = 1 / d;\n    let h = d;\n    \n    for (let m = 1; m <= maxIterations; m++) {\n      const m2 = 2 * m;\n      let aa = m * (b - m) * x / ((a + m2 - 1) * (a + m2));\n      d = 1 + aa * d;\n      if (Math.abs(d) < epsilon) d = epsilon;\n      c = 1 + aa / c;\n      if (Math.abs(c) < epsilon) c = epsilon;\n      d = 1 / d;\n      h *= d * c;\n      \n      aa = -(a + m) * (a + b + m) * x / ((a + m2) * (a + m2 + 1));\n      d = 1 + aa * d;\n      if (Math.abs(d) < epsilon) d = epsilon;\n      c = 1 + aa / c;\n      if (Math.abs(c) < epsilon) c = epsilon;\n      d = 1 / d;\n      const del = d * c;\n      h *= del;\n      \n      if (Math.abs(del - 1) < epsilon) break;\n    }\n    \n    return h;\n  }\n  \n  // Cohen's d effect size\n  static cohenD(sample1: number[], sample2: number[]): number {\n    const mean1 = this.mean(sample1);\n    const mean2 = this.mean(sample2);\n    const std1 = this.std(sample1);\n    const std2 = this.std(sample2);\n    const n1 = sample1.length;\n    const n2 = sample2.length;\n    \n    // Pooled standard deviation\n    const pooledStd = Math.sqrt(((n1 - 1) * std1 * std1 + (n2 - 1) * std2 * std2) / (n1 + n2 - 2));\n    \n    return (mean1 - mean2) / pooledStd;\n  }\n  \n  // Confidence interval for mean difference\n  static confidenceInterval(sample1: number[], sample2: number[], confidenceLevel: number): { lower: number; upper: number } {\n    const mean1 = this.mean(sample1);\n    const mean2 = this.mean(sample2);\n    const std1 = this.std(sample1);\n    const std2 = this.std(sample2);\n    const n1 = sample1.length;\n    const n2 = sample2.length;\n    \n    const meanDiff = mean1 - mean2;\n    const se = Math.sqrt((std1 * std1) / n1 + (std2 * std2) / n2);\n    \n    // Critical t-value (approximation for large samples)\n    const alpha = 1 - confidenceLevel;\n    const df = n1 + n2 - 2;\n    const tCritical = this.tInverse(1 - alpha / 2, df);\n    \n    const margin = tCritical * se;\n    \n    return {\n      lower: meanDiff - margin,\n      upper: meanDiff + margin\n    };\n  }\n  \n  // Inverse t-distribution (approximation)\n  static tInverse(p: number, df: number): number {\n    if (df >= 30) {\n      // Use normal approximation for large df\n      return this.normalInverse(p);\n    }\n    \n    // Simple approximation for t-distribution\n    const z = this.normalInverse(p);\n    const correction = (z * z * z + z) / (4 * df) + (5 * z * z * z * z * z + 16 * z * z * z + 3 * z) / (96 * df * df);\n    return z + correction;\n  }\n  \n  // Inverse normal distribution (Box-Muller derived)\n  static normalInverse(p: number): number {\n    if (p <= 0) return -Infinity;\n    if (p >= 1) return Infinity;\n    if (p === 0.5) return 0;\n    \n    // Rational approximation\n    const a = [0, -3.969683028665376e+01, 2.209460984245205e+02, -2.759285104469687e+02, 1.383577518672690e+02, -3.066479806614716e+01, 2.506628277459239e+00];\n    const b = [0, -5.447609879822406e+01, 1.615858368580409e+02, -1.556989798598866e+02, 6.680131188771972e+01, -1.328068155288572e+01];\n    \n    const r = p > 0.5 ? 1 - p : p;\n    const t = Math.sqrt(-2 * Math.log(r));\n    \n    let num = a[6];\n    for (let i = 5; i >= 1; i--) {\n      num = num * t + a[i];\n    }\n    \n    let den = b[5];\n    for (let i = 4; i >= 1; i--) {\n      den = den * t + b[i];\n    }\n    \n    let result = t - num / den;\n    return p > 0.5 ? result : -result;\n  }\n}\n\n// Main simulation function\nfunction simulationP(config: SimulationConfig): SimulationResults {\n  const { samplePairs, simulationCount, confidenceLevel } = config;\n  \n  // Initialize overall results structure\n  const results: SimulationResults = {\n    // Legacy single-pair results (for backward compatibility - use first pair)\n    effectSize: [],\n    pValues: [],\n    ciGaps: [],\n    upperBounds: [],\n    lowerBounds: [],\n    log10P: [],\n    sValues: [],\n    meanEffectSize: 0,\n    meanCIGap: 0,\n    powerAtThresholds: {},\n    completedSimulations: 0,\n    \n    // Multi-pair results (like the original notebook)\n    samplePairResults: []\n  };\n  \n  if (!samplePairs || samplePairs.length === 0) {\n    return results;\n  }\n  \n  let totalSimulations = 0;\n  \n  // Process ALL sample pairs (like the original notebook)\n  samplePairs.forEach((samplePair, pairIndex) => {\n    const { population1, population2, sampleSize } = samplePair;\n    \n    // Create separate results for this sample pair\n    const pairResults: SamplePairResult = {\n      samplePairName: samplePair.name,\n      sampleSize: sampleSize,\n      trueEffectSize: 0,\n      effectSize: [] as number[],\n      pValues: [] as number[],\n      ciGaps: [] as number[],\n      upperBounds: [] as number[],\n      lowerBounds: [] as number[],\n      log10P: [] as number[],\n      sValues: [] as number[],\n      meanEffectSize: 0,\n      meanCIGap: 0,\n      powerAtThresholds: {} as Record<string, number>\n    };\n    \n    // Calculate true effect size (Cohen's d) from population parameters\n    const pooledStd = Math.sqrt((population1.std * population1.std + population2.std * population2.std) / 2);\n    pairResults.trueEffectSize = Math.abs(population1.mean - population2.mean) / pooledStd;\n    \n    // Pre-generate populations for efficiency\n    const pop1 = StatisticalCalculator.generateNormalSamples(population1.size, population1.mean, population1.std);\n    const pop2 = StatisticalCalculator.generateNormalSamples(population2.size, population2.mean, population2.std);\n    \n    // Run simulations for this sample pair\n    for (let i = 0; i < simulationCount; i++) {\n      try {\n        // Sample from populations\n        const sample1 = StatisticalCalculator.sampleWithoutReplacement(pop1, sampleSize);\n        const sample2 = StatisticalCalculator.sampleWithoutReplacement(pop2, sampleSize);\n        \n        // Calculate statistics\n        const tTest = StatisticalCalculator.welchTTest(sample1, sample2);\n        const effectSize = StatisticalCalculator.cohenD(sample1, sample2);\n        const ci = StatisticalCalculator.confidenceInterval(sample1, sample2, confidenceLevel);\n        \n        // Store results for this pair\n        pairResults.effectSize.push(effectSize);\n        pairResults.pValues.push(tTest.pValue);\n        pairResults.ciGaps.push(ci.upper - ci.lower);\n        pairResults.upperBounds.push(ci.upper);\n        pairResults.lowerBounds.push(ci.lower);\n        pairResults.log10P.push(Math.log10(tTest.pValue));\n        pairResults.sValues.push(-Math.log2(tTest.pValue)); // Shannon information\n        \n        totalSimulations++;\n        \n        // Progress reporting every 100 simulations\n        if (totalSimulations % 100 === 0 || (pairIndex === samplePairs.length - 1 && i === simulationCount - 1)) {\n          const totalExpected = samplePairs.length * simulationCount;\n          self.postMessage({\n            type: 'SIMULATION_PROGRESS',\n            id: config.id,\n            progress: totalSimulations / totalExpected,\n            data: { completedSimulations: totalSimulations }\n          } as WorkerMessage);\n        }\n      } catch (simulationError) {\n        // Continue with next simulation instead of stopping\n      }\n    }\n    \n    // Calculate summary statistics for this pair\n    pairResults.meanEffectSize = pairResults.effectSize.reduce((sum, d) => sum + d, 0) / simulationCount;\n    pairResults.meanCIGap = pairResults.ciGaps.reduce((sum, gap) => sum + gap, 0) / simulationCount;\n    \n    // Calculate power at different significance thresholds for this pair\n    config.significanceThresholds.forEach(threshold => {\n      const significantResults = pairResults.pValues.filter(p => p < threshold).length;\n      pairResults.powerAtThresholds[threshold.toString()] = significantResults / simulationCount;\n    });\n    \n    // Add this pair's results to the overall results\n    results.samplePairResults.push(pairResults);\n    \n    // For backward compatibility, use the first pair as the legacy single-pair result\n    if (pairIndex === 0) {\n      results.effectSize = [...pairResults.effectSize];\n      results.pValues = [...pairResults.pValues];\n      results.ciGaps = [...pairResults.ciGaps];\n      results.upperBounds = [...pairResults.upperBounds];\n      results.lowerBounds = [...pairResults.lowerBounds];\n      results.log10P = [...pairResults.log10P];\n      results.sValues = [...pairResults.sValues];\n      results.meanEffectSize = pairResults.meanEffectSize;\n      results.meanCIGap = pairResults.meanCIGap;\n      results.powerAtThresholds = { ...pairResults.powerAtThresholds };\n      results.sampleSize = pairResults.sampleSize;\n      results.trueEffectSize = pairResults.trueEffectSize;\n      results.samplePairName = pairResults.samplePairName;\n    }\n  });\n  \n  results.completedSimulations = totalSimulations;\n  \n  return results;\n}\n\n// Web Worker message handler\nself.onmessage = function(e: MessageEvent) {\n  const { type, id, data } = e.data;\n  \n  try {\n    switch (type) {\n      case 'TEST':\n        self.postMessage({\n          type: 'TEST_RESPONSE',\n          id,\n          data: 'Worker communication working!'\n        } as WorkerMessage);\n        break;\n        \n      case 'SIMULATION_START':\n        const config = data as SimulationConfig;\n        \n        // Validate config\n        if (!config) {\n          throw new Error('No configuration provided');\n        }\n        \n        if (!config.samplePairs || config.samplePairs.length === 0) {\n          throw new Error('Invalid simulation configuration: no sample pairs');\n        }\n        \n        if (!config.simulationCount || config.simulationCount <= 0) {\n          throw new Error('Invalid simulation configuration: simulation count must be positive');\n        }\n        \n        // Start the simulation\n        const results = simulationP(config);\n        \n        self.postMessage({\n          type: 'SIMULATION_COMPLETE',\n          id,\n          data: results\n        } as WorkerMessage);\n        break;\n        \n      default:\n        throw new Error(`Unknown message type: ${type}`);\n    }\n  } catch (error) {\n    self.postMessage({\n      type: 'SIMULATION_ERROR',\n      id,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    } as WorkerMessage);\n  }\n}; "],"names":["StatisticalCalculator","n","mean","std","samples","u1","u2","z0","z1","population","sampleSize","indices","_","i","selectedIndices","randomIndex","sum","x","m","variance","sample1","sample2","n1","n2","mean1","mean2","std1","std2","pooledSE","tStat","df","pValue","a","b","bt","coefficients","t","c","d","h","m2","aa","del","pooledStd","confidenceLevel","meanDiff","se","alpha","margin","p","z","correction","r","num","den","result","simulationP","config","samplePairs","simulationCount","results","totalSimulations","samplePair","pairIndex","population1","population2","pairResults","pop1","pop2","tTest","effectSize","ci","totalExpected","gap","threshold","significantResults","e","type","id","data","error"],"mappings":"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"}